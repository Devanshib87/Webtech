// src/App.js
import React, { useState, useEffect, useCallback } from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import './App.css'; // Basic App styles

// Import Firebase Firestore database instance
import { db } from './firebase'; // Make sure path is correct
import {
  collection, // Reference to a Firestore collection
  getDocs,    // Fetch documents from a collection
  addDoc,     // Add a new document to a collection
  query,      // Create a query against a collection
  orderBy,    // Order query results
  Timestamp   // Firestore timestamp type
} from "firebase/firestore";

// Import Components and Pages
import Navbar from './components/Navbar';
import Home from './Pages/Home';
import Students from './Pages/Students';
import Sponsors from './Pages/Sponsors';

function App() {
  // State remains the same
  const [students, setStudents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // --- Fetch Students from Firestore ---
  const fetchStudents = useCallback(async () => {
    console.log("Attempting to fetch students from Firestore...");
    setLoading(true);
    setError(null);
    const studentsCollectionRef = collection(db, "students"); // Reference the 'students' collection
    // Create a query to order students, e.g., by creation time descending
    const q = query(studentsCollectionRef, orderBy("createdAt", "desc"));

    try {
      const querySnapshot = await getDocs(q); // Execute the query
      const studentsData = querySnapshot.docs.map(doc => ({
        id: doc.id, // Get the unique document ID from Firestore
        ...doc.data(), // Spread the rest of the document data
        // Convert Firestore Timestamp to JS Date if needed (optional)
        // createdAt: doc.data().createdAt.toDate()
      }));
      setStudents(studentsData);
      console.log("Students fetched successfully from Firestore.");
    } catch (err) {
      console.error("Error fetching students from Firestore:", err);
      setError("Could not load student data. Please check your connection or Firestore setup.");
    } finally {
      setLoading(false);
    }
  }, []); // Empty dependency array, created once

  // Fetch students when the component mounts
  useEffect(() => {
    fetchStudents();
  }, [fetchStudents]);


  // --- Add a Student to Firestore ---
  const addStudent = useCallback(async (studentData) => {
    console.log("Attempting to add student to Firestore:", studentData);
    const studentsCollectionRef = collection(db, "students"); // Reference the 'students' collection

    try {
      // Add the new student document to Firestore
      // Include a 'createdAt' timestamp generated by the server
      const docRef = await addDoc(studentsCollectionRef, {
        ...studentData, // Spread the form data (name, grade, etc.)
        createdAt: Timestamp.now() // Add server timestamp for ordering
      });
      console.log("Student added successfully to Firestore with ID:", docRef.id);

      // --- IMPORTANT: Refresh the list after adding ---
      // This ensures the UI shows the newly added student with its Firestore ID
      // Alternatively, you could optimistically update the state, but refetching is simpler
      await fetchStudents(); // Re-run the fetch function

      // Return success indication (optional, could return the new doc ID)
      return true;

    } catch (err) {
      console.error("Error adding student to Firestore:", err);
      // Throw an error that the form component can catch and display
      throw new Error("Failed to add student to Firestore. Please try again.");
    }
    // Note: No 'finally' block needed here as loading state is handled in the form
  }, [fetchStudents]); // Depends on fetchStudents to refresh the list

  // --- Render the Application (Routing remains the same) ---
  return (
    <Router>
      <div className="App">
        <Navbar />
        <main>
          <Routes>
            <Route path="/" element={<Home />} />
            <Route
              path="/students"
              element={<Students onAddStudent={addStudent} />} // Pass the Firebase addStudent function
            />
            <Route
              path="/sponsors"
              element={<Sponsors students={students} loading={loading} error={error} />} // Pass fetched data/state
            />
            <Route path="*" element={
              <div style={{ padding: "40px", textAlign: "center" }}>
                <h2>404: Page Not Found</h2>
                <p>Sorry, the page you are looking for does not exist.</p>
                <Link to="/" className="empty-state-link" style={{ marginTop: '20px' }}>Go to Home</Link> {/* Assuming you have Link imported or style defined */}
              </div>
             } />
          </Routes>
        </main>
      </div>
    </Router>
  );
}
// Helper Link component if not already globally available/styled
const Link = ({ to, children, ...props }) => (
    <a href={to} {...props}>{children}</a>
);


export default App;